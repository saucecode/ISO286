# Mapping range of (Above mm, Up to including mm):[values in 10s of micrometers]
# Tolerance grade indices start from IT01, IT0, IT1, IT2, ..., IT18

tolerance_grades = {(0, 3): [3, 5, 8, 12, 20, 30, 40, 60, 100, 140, 250, 400, 600, 1000, 1400, 2500, 4000, 6000, 10000, 14000], (3, 6): [4, 6, 10, 15, 25, 40, 50, 80, 120, 180, 300, 480, 750, 1200, 1800, 3000, 4800, 7500, 12000, 18000], (6, 10): [4, 6, 10, 15, 25, 40, 60, 90, 150, 220, 360, 580, 900, 1500, 2200, 3600, 5800, 9000, 15000, 22000], (10, 18): [5, 8, 12, 20, 30, 50, 80, 110, 180, 270, 430, 700, 1100, 1800, 2700, 4300, 7000, 11000, 18000, 27000], (18, 30): [6, 10, 15, 25, 40, 60, 90, 130, 210, 330, 520, 840, 1300, 2100, 3300, 5200, 8400, 13000, 21000, 33000], (30, 50): [6, 10, 15, 25, 40, 70, 110, 160, 250, 390, 620, 1000, 1600, 2500, 3900, 6200, 10000, 16000, 25000, 39000], (50, 80): [8, 12, 20, 30, 50, 80, 130, 190, 300, 460, 740, 1200, 1900, 3000, 4600, 7400, 12000, 19000, 30000, 46000], (80, 120): [10, 15, 25, 40, 60, 100, 150, 220, 350, 540, 870, 1400, 2200, 3500, 5400, 8700, 14000, 22000, 35000, 54000], (120, 180): [12, 20, 35, 50, 80, 120, 180, 250, 400, 630, 1000, 1600, 2500, 4000, 6300, 10000, 16000, 25000, 40000, 63000], (180, 250): [20, 30, 45, 70, 100, 140, 200, 290, 460, 720, 1150, 1850, 2900, 4600, 7200, 11500, 18500, 29000, 46000, 72000], (250, 315): [25, 40, 60, 80, 120, 160, 230, 320, 520, 810, 1300, 2100, 3200, 5200, 8100, 13000, 21000, 32000, 52000, 81000], (315, 400): [30, 50, 70, 90, 130, 180, 250, 360, 570, 890, 1400, 2300, 3600, 5700, 8900, 14000, 23000, 36000, 57000, 89000], (400, 500): [40, 60, 80, 100, 150, 200, 270, 400, 630, 970, 1550, 2500, 4000, 6300, 9700, 15500, 25000, 40000, 63000, 97000], (500, 630): [None, None, 90, 110, 160, 220, 320, 440, 700, 1100, 1750, 2800, 4400, 7000, 11000, 17500, 28000, 44000, 70000, 110000], (630, 800): [None, None, 100, 130, 180, 250, 360, 500, 800, 1250, 2000, 3200, 5000, 8000, 12500, 20000, 32000, 50000, 80000, 125000], (800, 1000): [None, None, 110, 150, 210, 280, 400, 560, 900, 1400, 2300, 3600, 5600, 9000, 14000, 23000, 36000, 56000, 90000, 140000], (1000, 1250): [None, None, 130, 180, 240, 330, 470, 660, 1050, 1650, 2600, 4200, 6600, 10500, 16500, 26000, 42000, 66000, 105000, 165000], (1250, 1600): [None, None, 150, 210, 290, 390, 550, 780, 1250, 1950, 3100, 5000, 7800, 12500, 19500, 31000, 50000, 78000, 125000, 195000], (1600, 2000): [None, None, 180, 250, 350, 460, 650, 920, 1500, 2300, 3700, 6000, 9200, 15000, 23000, 37000, 60000, 92000, 150000, 230000], (2000, 2500): [None, None, 220, 300, 410, 550, 780, 1100, 1750, 2800, 4400, 7000, 11000, 17500, 28000, 44000, 70000, 11000, 175000, 280000], (2500, 3150): [None, None, 260, 360, 500, 680, 960, 1350, 2100, 3300, 5400, 8600, 13500, 21000, 33000, 54000, 86000, 135000, 210000, 330000]}

# Mapping range of (Above mm, Up to including mm):[values in 10s of micrometers]
# For IT0, IT1, IT2, values are None, because they are illegal
# Starts at IT0
delta_correction = {(0, 3): [None, None, None, 0, 0, 0, 0, 0, 0], (3, 6): [None, None, None, 10, 15, 10, 30, 40, 60], (6, 10): [None, None, None, 10, 15, 20, 30, 60, 70], (10, 14): [None, None, None, 10, 20, 30, 30, 70, 90], (14, 18): [None, None, None, 10, 20, 30, 30, 70, 90], (18, 24): [None, None, None, 15, 20, 30, 40, 80, 120], (24, 30): [None, None, None, 15, 20, 30, 40, 80, 120], (30, 40): [None, None, None, 15, 30, 40, 50, 90, 140], (40, 50): [None, None, None, 15, 30, 40, 50, 90, 140], (50, 65): [None, None, None, 20, 30, 50, 60, 110, 160], (65, 80): [None, None, None, 20, 30, 50, 60, 110, 160], (80, 100): [None, None, None, 20, 40, 50, 70, 130, 190], (100, 120): [None, None, None, 20, 40, 50, 70, 130, 190], (120, 140): [None, None, None, 30, 40, 60, 70, 150, 230], (140, 160): [None, None, None, 30, 40, 60, 70, 150, 230], (160, 180): [None, None, None, 30, 40, 60, 70, 150, 230], (180, 200): [None, None, None, 30, 40, 60, 90, 170, 260], (200, 225): [None, None, None, 30, 40, 60, 90, 170, 260], (225, 250): [None, None, None, 30, 40, 60, 90, 170, 260], (250, 280): [None, None, None, 40, 40, 70, 90, 200, 290], (280, 315): [None, None, None, 40, 40, 70, 90, 200, 290], (315, 355): [None, None, None, 40, 50, 70, 110, 210, 320], (355, 400): [None, None, None, 40, 50, 70, 110, 210, 320], (400, 450): [None, None, None, 50, 50, 70, 130, 230, 340], (450, 500): [None, None, None, 50, 50, 70, 130, 230, 340], (500, 3150): [None, None, None, 0, 0, 0, 0, 0, 0]}

# Mapping range of (Above mm, Up to including mm):[values in micrometers]
# for indices A B C CD D E EF F FG G H
fundamental_deviations_A_to_H = {(0, 3): [270, 140, 60, 34, 20, 14, 10, 6, 4, 2, 0], (3, 6): [270, 140, 70, 46, 30, 20, 14, 10, 6, 4, 0], (6, 10): [280, 150, 80, 56, 40, 25, 18, 13, 8, 5, 0], (10, 14): [290, 150, 95, None, 50, 32, None, 16, None, 6, 0], (14, 18): [290, 150, 95, None, 50, 32, None, 16, None, 6, 0], (18, 24): [300, 160, 110, None, 65, 40, None, 20, None, 7, 0], (24, 30): [300, 160, 110, None, 65, 40, None, 20, None, 7, 0], (30, 40): [310, 170, 120, None, 80, 50, None, 25, None, 9, 0], (40, 50): [320, 180, 130, None, 80, 50, None, 25, None, 9, 0], (50, 65): [340, 190, 140, None, 100, 60, None, 30, None, 10, 0], (65, 80): [360, 200, 150, None, 100, 60, None, 30, None, 10, 0], (80, 100): [380, 220, 170, None, 120, 72, None, 36, None, 12, 0], (100, 120): [410, 240, 180, None, 120, 72, None, 36, None, 12, 0], (120, 140): [460, 260, 200, None, 145, 85, None, 43, None, 14, 0], (140, 160): [520, 280, 210, None, 145, 85, None, 43, None, 14, 0], (160, 180): [580, 310, 230, None, 145, 85, None, 43, None, 14, 0], (180, 200): [660, 340, 240, None, 170, 100, None, 50, None, 15, 0], (200, 225): [740, 380, 260, None, 170, 100, None, 50, None, 15, 0], (225, 250): [820, 420, 280, None, 170, 100, None, 50, None, 15, 0], (250, 280): [920, 480, 300, None, 190, 110, None, 56, None, 17, 0], (280, 315): [1050, 540, 330, None, 190, 110, None, 56, None, 17, 0], (315, 355): [1200, 600, 360, None, 210, 125, None, 62, None, 18, 0], (355, 400): [1350, 680, 400, None, 210, 125, None, 62, None, 18, 0], (400, 450): [1500, 760, 440, None, 230, 135, None, 68, None, 20, 0], (450, 500): [1650, 840, 480, None, 230, 135, None, 68, None, 20, 0], (500, 560): [None, None, 520, None, 260, 145, None, 76, None, 22, 0], (560, 630): [None, None, 580, None, 260, 145, None, 76, None, 22, 0], (630, 710): [None, None, 640, None, 290, 160, None, 80, None, 24, 0], (710, 800): [None, None, 700, None, 290, 160, None, 80, None, 24, 0], (800, 900): [None, None, 780, None, 320, 170, None, 86, None, 26, 0], (900, 1000): [None, None, 860, None, 320, 170, None, 86, None, 26, 0], (1000, 1120): [None, None, 940, None, 350, 195, None, 98, None, 28, 0], (1120, 1250): [None, None, 1050, None, 350, 195, None, 98, None, 28, 0], (1250, 1400): [None, None, 1150, None, 390, 220, None, 110, None, 30, 0], (1400, 1600): [None, None, 1300, None, 390, 220, None, 110, None, 30, 0], (1600, 1800): [None, None, 1450, None, 430, 240, None, 120, None, 32, 0], (1800, 2000): [None, None, 1600, None, 430, 240, None, 120, None, 32, 0], (2000, 2240): [None, None, 1800, None, 480, 260, None, 130, None, 34, 0], (2240, 2500): [None, None, 2000, None, 480, 260, None, 130, None, 34, 0], (2500, 2800): [None, None, 2200, None, 520, 290, None, 145, None, 38, 0], (2800, 3150): [None, None, 2500, None, 520, 290, None, 145, None, 38, 0]}

# {(i[0],i[1]):[None, None, None]+i[2:] for i in data}

# 45k6 == Shaft(45, 'k', 6) == shaft('45k6')
class Shaft(object):
	def __init__(self, nominal, deviation, grade):
		pass

def get_tolerance_grade(nominal: float, grade: int):
	if isinstance(grade, str):
		if grade == '01':
			grade = -1
	grade += 1
	grade_value = None
	for (above, upto), values in tolerance_grades.items():
		if nominal > above and nominal <= upto:
			grade_value = values[grade]
			break
	return grade_value

assert get_tolerance_grade(1.5, '01') == 3
assert get_tolerance_grade(3, '01') == 3
assert get_tolerance_grade(3, 0) == 5
assert get_tolerance_grade(3.01, 0) == 6
assert get_tolerance_grade(50, 18) == 39000
assert get_tolerance_grade(501, 0) == None
assert get_tolerance_grade(3150, 18) == 330000
assert get_tolerance_grade(200, 11) == 2900